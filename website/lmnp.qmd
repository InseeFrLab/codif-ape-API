---
title: "Analyse des loueurs meublés non professionnel"
---


```{ojs}
grid = await html`<div style="
              background: #fff;
              margin: 10;
              border: none ;
              display: grid;
              width: ${screen.width};
              grid-template-areas:
                'a b'
                'c c'
                'd d'
                ;
              grid-gap: 10px;
            ">
              <div name="a" style="grid-area: a; position: relative;">${viewof Seuil}</div>
              <div name="b" style="grid-area: b; position: relative;">${viewof selection}</div>
              <div name="c" style="grid-area: c; position: relative;">${viewof var_annexes}</div>
              <div name="d" style="grid-area: d; position: relative;">${viewof table_data}</div>
            </div>`
```


```{ojs}
viewof Seuil = Inputs.range([0, 1], {label: "Seuil choisi", step: 0.01, value: 0.8})
```

```{ojs}
viewof selection = Inputs.select(["Tous", "Bonnes prédictions", "Erreurs reprises", "Erreurs problématiques"], {label: "Résultats des LMNP"}) 
```

```{ojs}
viewof var_annexes = Inputs.toggle({label: "Variables annexes", values: [true, false]})
```

```{ojs}
viewof table_data = Inputs.table(selector(transpose(data_lmnp), selection), {
    rows: 17,
    columns: var_annexes
  ? ["text_description", "type_", "Prédiction", "Score", "nature", "surface", "event"]
  : ["text_description", "type_", "Prédiction", "Score"],
  header: {
    text_description: "Libellé",
    type_: "Type",
    nature: "Nature",
    surface: "Surface",
    event : "Évènement"
  }, 
  format: {
    "Score": d => get_background(d)
  }
})
```


```{ojs}
function get_background(d) {
    const color = d > Seuil ? "#19975d" : "#f15060"

  
  return html`<div style="
    background: ${color.toLocaleString("en")};
    width: 95%;
    float: center;
    border-radius:15px;
    padding-left: 10px;
    padding-right: 10px;
    margin: 0 auto; /* Center the div horizontally */
    text-align: center; /* Center the text within the div */
    ">
    ${Math.round(d * 10000) / 10000}`;
}
```


<!-- https://observablehq.com/@romellogoodman/riso-colors -->

```{ojs}
function selector(data, selector) {
    let b;
    switch (selector) {
        case "Tous":
            b = data;
        case "Bonnes prédictions":
            b = data.filter(d => d.Error === false);
            break;
        case "Erreurs reprises":
            b = data.filter(d => d.Error === true && d.Score <= Seuil);
            break;
        case "Erreurs problématiques":
            b = data.filter(d => d.Error === true && d.Score > Seuil);
            break;
        default:
            break;
    }
    return b;
}

```




```{ojs}
import {slider} from "@jashkenas/inputs"
```

<!-- Annexes  -->
```{python}
import requests
import pandas as pd
import numpy as np
from urllib.parse import urlencode
import os
```



```{python}

def query_batch_api(username: str, password: str, data: pd.DataFrame, nb_echos_max:int = 5, prob_min: float = 0.01):
    base_url = "https://codification-ape.lab.sspcloud.fr/predict-batch"
    params = {
        "nb_echos_max": nb_echos_max,
        "prob_min": prob_min
    }
    url = f"{base_url}?{urlencode(params)}"

    # Create the request body as a dictionary from the DataFrame
    request_body = data.to_dict(orient="list")

    response = requests.post(url, json=request_body, auth=(username, password))

    if response.status_code == 200:
        return response.json()
    elif response.status_code == 400:
        print(response.json()["detail"])
    else:
        print("Error occurred while querying the API.")
        return None
```

```{python}
libs = list(np.repeat(["LOUEUR EN MEUBLE NON PROFESSIONNEL", "LOUEUR MEUBLE NON PROFESSIONNEL", "LMNP"], 11, axis=0))
types = ["", "L", "E", "X", "S", "I", "C", "R", "G", "D", "Y"] * 3
natures = ["", "", "", "", "", "", "", "", "", "", ""] * 3
surfaces =["", "", "", "", "", "", "", "", "", "", ""] * 3
event = ["", "", "", "", "", "", "", "", "", "", ""] * 3
```

```{python}
data = {
    "text_description": libs,
    "type_": types,
    "nature": natures,
    "surface": surfaces,
    "event": event
}
df = pd.DataFrame(data)
```

```{python}
username = "codification-ape" #os.getenv("API_USERNAME")
password = "codification-sirene4" #os.getenv("API_PASSWORD")
result = query_batch_api(username, password, df)

```


```{python}
w=pd.DataFrame({
    "Prédiction" : [result[i]["1"]["code"] for i in range(len(result))],
    "Score" : [result[i]["IC"]  for i in range(len(result))],
    "Libellé" : [result[i]["1"]["libelle"]  for i in range(len(result))]})
```

```{python}
df['True'] = df['type_'].apply(lambda x: "5520Z" if x in ['C', 'R', 'G', 'D', 'Y'] else "6820A")
```

```{python}
df = df.merge(w, left_index=True, right_index=True)
df["Error"] = df["True"] != df["Prédiction"]

ojs_define(data_lmnp = df)
```
