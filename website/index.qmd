---
title: "codif-ape-API"
---

## Quarto

```{ojs}
viewof username = secret("apiKey", {
  description:
    "This is your username for the API, it is only available to you!",
  submit: "Set username"
})
```

```{ojs}
viewof password = secret("apiKey", {
  description:
    "This is your password for the API, it is only available to you!",
  submit: "Set password"
})
```

```{ojs}
viewof password = secret("apiKey", {
  description:
    "This is your password for the API, it is only available to you!",
  submit: "Set password"
})
```

```{ojs}
viewof csvfile = Inputs.file({
  label: md`__Observations to evaluate__ üìÅ ([Example here](https://raw.githubusercontent.com/ThomasFaria/codif-ape-API/main/website/exemples/exemple.csv))`,
  accept: ".csv",
  required: true
})
```

```{ojs}
grid = await html`<div style="
              background: #fff;
              margin: 0;
              border: none ;
              display: grid;
              width: ${screen.width};
              grid-template-areas: 
                'a b c'
                'd d d'
                ;
              grid-gap: 10px;
            ">
              <div name="a" style="grid-area: a; position: relative;">${viewof quantile}</div>
              <div name="b" style="grid-area: b; position: relative;"><div class="textstyled">Accuracy: ${Accuracy}</div></div>
              <div name="c" style="grid-area: c; position: relative;"><div class="textstyled">Seuil: ${Seuil}</div></div>
              <div name="d" style="grid-area: d; position: relative;">${distrib}</div>
            </div>`
```


```{ojs}
viewof quantile = slider({
  min: 0,
  max: 100,
  step: 1,
  value: 80,
  format: (v) => `${v}%`,
  description: "Taux de classification automatique"
})
```

```{ojs}
distrib = Plot.plot({
  round: true,
  width: screen.width * 0.7,
  color: { scheme: "BuRd", legend: true },
  marks: [
    Plot.rectY(
      processed_response,
      Plot.binX(
        { y: "count" },
        { x: "IC", fill: "Result", mixBlendMode: "multiply", tip: true }
      )
    ),
    Plot.ruleY([0]),
    Plot.ruleX([Seuil], { strokeWidth: 2, tip: true })
  ]
})
```

```{ojs}
Seuil = Math.round(
  d3.quantile(
    processed_response.map((d) => d.IC),
    1 - quantile / 100
  ) * 100
) / 100
```

```{ojs}
Accuracy = Math.round(d3.mean(subset.map((d) => d.IC)) * 10000) / 100
```

```{ojs}
Inputs.table(processed_response)
```

### Wrong prediction (new page)

```{ojs}
WrongPredictions = Inputs.table(subset.filter((d) => 1 - d.Result))
```

## Data stuffs

```{ojs}
data = db.query(
  `
SELECT text_description, type_, nature, surface, event, code
FROM liasses
`
)
```

```{ojs}
transformedData = data.reduce((acc, obj) => {
  for (const [key, value] of Object.entries(obj)) {
    if (!acc.hasOwnProperty(key)) {
      acc[key] = [];
    }
    acc[key].push(value);
  }
  return acc;
}, {})
```

```{ojs}
db = DuckDBClient.of({
  liasses: await csvfile.csv()
})
```

```{ojs}
processed_response = Object.keys(response.IC).map((key) => ({
  IC: response.IC[key] > 1 ? 1 - 1e-16 : response.IC[key],
  Probability: response.Probability[key],
  Prediction: response.Prediction[key],
  Code: response.Code[key],
  Result: response.Result[key],
  Lib: response.Lib[key]
}))
```

```{ojs}
response = queryBatchApi(username, password, data)
```

```{ojs}
subset = processed_response.filter((d) => d.IC > Seuil)
```

## Functions

```{ojs}
async function queryBatchApi(username, password, data) {
  const url = "https://codification-ape.lab.sspcloud.fr/evaluation";

  // Create the request body
  const request_body = data.reduce((acc, obj) => {
    for (const [key, value] of Object.entries(obj)) {
      if (!acc.hasOwnProperty(key)) {
        acc[key] = [];
      }
      acc[key].push(value);
    }
    return acc;
  }, {});

  const response = await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Basic ${btoa(`${username}:${password}`)}`
    },
    body: JSON.stringify(request_body)
  });

  if (response.ok) {
    return response.json();
  } else if (response.status === 400) {
    console.log((await response.json()).detail);
  } else {
    console.log("Error occurred while querying the API.");
    return response;
  }
}
```

## Imports

```{ojs}
import { secret } from "@tmcw/secret"
```

```{ojs}
import {slider} from "@jashkenas/inputs"
```

```{ojs}
<style>
  
@import
url('https://fonts.googleapis.com/css2?family=Roboto:wght@300&display=swap');
  
.title {
    font-family: Roboto;
    font-weight:bold;
    font-size:30px;
    color:white;
    border-radius: 20px;
    background: #1D3867;
    width: 200px;
    height: 45px;
    margin: auto;
    width: 100%;
    padding-top: 10px;
    padding-bottom: 10px;
    text-align: center;
}

.textstyled {
    left: 0px;
    font-family: Roboto;
    font-weight:bold;
    font-size:15px;
    color:white;
    border-radius: 15px;
    background: #1D3867;
    height: 15px;
    margin: auto;
    width: fit-content;
    padding-left: 10px;
    padding-right: 10px;
    padding-top: 5px;
    padding-bottom: 10px;
}

.rectangle {
    width: 200px;
    height: 100px;
    background-color: blue;
    color: white;
    text-align: center;
    line-height: 100px;
    font-size: 20px;
}
</style>
```